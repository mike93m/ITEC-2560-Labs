{
  "version": 3,
  "sources": ["../../mande/dist/mande.mjs"],
  "sourcesContent": ["/*!\n  * mande v2.0.8\n  * (c) 2024 Eduardo San Martin Morote\n  * @license MIT\n  */\nfunction stringifyQuery(query) {\n    let searchParams = Object.keys(query)\n        .map((k) => [k, query[k]].map(encodeURIComponent).join('='))\n        .join('&');\n    return searchParams ? '?' + searchParams : '';\n}\nlet leadingSlashRE = /^\\/+/;\nfunction joinURL(base, url) {\n    return (base +\n        (url &&\n            (base.endsWith('/')\n                ? url.replace(leadingSlashRE, '')\n                : url.startsWith('/')\n                    ? url\n                    : '/' + url)));\n}\nfunction removeNullishValues(headers) {\n    return Object.keys(headers).reduce((newHeaders, headerName) => {\n        if (headers[headerName] != null) {\n            // @ts-ignore\n            newHeaders[headerName] = headers[headerName];\n        }\n        return newHeaders;\n    }, {});\n}\n/**\n * Global default options as {@link Options} that are applied to **all** mande\n * instances. Always contain an initialized `headers` property with the default\n * headers:\n * - Accept: 'application/json'\n * - 'Content-Type': 'application/json'\n */\nconst defaults = {\n    responseAs: 'json',\n    headers: {\n        Accept: 'application/json',\n        // NOTE: instead of passing json here, we pass it when creating the request to automatically handle FormData\n        // 'Content-Type': data instanceof FormData ? null : 'application/json',\n    },\n    stringify: JSON.stringify,\n};\n/**\n * Create a Mande instance\n *\n * @example\n * ```js\n * const users = mande('/api/users')\n * users.get('2').then(user => {\n *   // do something\n * })\n * ```\n * @param baseURL - absolute url\n * @param passedInstanceOptions - optional options that will be applied to every\n * other request for this instance\n */\nfunction mande(baseURL, passedInstanceOptions = {}, fetchPolyfill) {\n    function _fetch(method, \n    // url can be any method, data for POST/PUT/PATCH, and options for all (without url or data)\n    urlOrDataOrOptions, \n    // data for POST/PUT/PATCH, and options for all (without url or data)\n    dataOrOptions, localOptions = {}) {\n        let url;\n        let data;\n        // at least the URL was omitted, localOptions wasn't passed so we can safely override it\n        // get(options) or put(data, options) or put(options)\n        if (typeof urlOrDataOrOptions === 'object') {\n            url = '';\n            // if urlOrDataOrOptions is an object, it's either options or data\n            // if dataOrOptions was passed, urlOrDataOrOptions is data\n            localOptions = dataOrOptions || urlOrDataOrOptions || {};\n            // if it's a POST/PUT/PATCH, dataOrOptions is data\n            // if it's option, we will set data to options but it will be ignored later\n            data = urlOrDataOrOptions;\n        }\n        else {\n            // get(url) or get(url, options) or put(url, data) or put(url, data, options)\n            url = urlOrDataOrOptions;\n            data = dataOrOptions;\n        }\n        let mergedOptions = {\n            ...defaults,\n            ...instanceOptions,\n            method,\n            ...localOptions,\n            // we need to ditch nullish headers\n            headers: removeNullishValues({\n                // let the browser automatically set the content-type with FormData\n                'Content-Type': data instanceof FormData ? null : 'application/json',\n                ...defaults.headers,\n                ...instanceOptions.headers,\n                ...localOptions.headers,\n            }),\n        };\n        let query = {\n            ...defaults.query,\n            ...instanceOptions.query,\n            ...localOptions.query,\n        };\n        let { responseAs } = mergedOptions;\n        url = joinURL(baseURL, typeof url === 'number' ? '' + url : url || '');\n        // TODO: warn about multiple queries provided not supported\n        // if (__DEV__ && query && urlInstance.search)\n        // TODO: use URL and URLSearchParams\n        url += stringifyQuery(query);\n        // only stringify body if it's a POST/PUT/PATCH, otherwise it could be the options object\n        // it's not used by GET/DELETE but it would also be wasteful\n        if (method[0] === 'P' && data && !mergedOptions.body) {\n            mergedOptions.body =\n                data instanceof FormData ? data : mergedOptions.stringify(data);\n        }\n        // we check the localFetch here to account for global fetch polyfills and msw in tests\n        const localFetch = typeof fetch != 'undefined' ? fetch : fetchPolyfill;\n        if (!localFetch) {\n            throw new Error('No fetch function exists. Make sure to include a polyfill on Node.js.');\n        }\n        return localFetch(url, mergedOptions)\n            .then((response) => \n        // This is to get the response directly in the next then\n        Promise.all([\n            response,\n            responseAs === 'response'\n                ? response\n                : // TODO: propagate error data to MandeError\n                    response[responseAs]().catch(() => null),\n        ]))\n            .then(([response, dataOrError]) => {\n            if (response.status >= 200 && response.status < 300) {\n                // data is a raw response when responseAs is response\n                return responseAs !== 'response' && response.status == 204\n                    ? null\n                    : dataOrError;\n            }\n            // Has better browser support and is way smaller than `class MandeError extends Error`\n            let err = new Error(response.statusText);\n            err.response = response;\n            err.body = dataOrError;\n            throw err;\n        });\n    }\n    const instanceOptions = {\n        query: {},\n        headers: {},\n        ...passedInstanceOptions,\n    };\n    return {\n        options: instanceOptions,\n        post: _fetch.bind(null, 'POST'),\n        put: _fetch.bind(null, 'PUT'),\n        patch: _fetch.bind(null, 'PATCH'),\n        // these two have no body\n        get: (url, options) => _fetch('GET', url, null, options),\n        delete: (url, options) => _fetch('DELETE', url, null, options),\n    };\n}\n/**\n * Creates an Nuxt 2 SSR compatible function that automatically proxies cookies to requests and works transparently on\n * the server and client (it still requires a fetch polyfill on Node). Note this is only needed if you need to proxy\n * cookies to the server.\n *\n * @example\n * ```js\n * import { mande, nuxtWrap } from 'mande'\n *\n * const fetchPolyfill = process.server ? require('node-fetch') : fetch\n * const users = mande(BASE_URL + '/api/users', {}, fetchPolyfill)\n *\n * export const getUserById = nuxtWrap(users, (api, id: string) => api.get(id))\n * ```\n *\n * @param api - Mande instance to wrap\n * @param fn - function to be wrapped\n */\nfunction nuxtWrap(api, fn) {\n    // args for the api call + 1 because of api parameter\n    const argsAmount = fn.length;\n    const wrappedCall = function _wrappedCall() {\n        let apiInstance = api;\n        let args = Array.from(arguments);\n        // call from nuxt server with a function to augment the api instance\n        if (arguments.length === argsAmount) {\n            apiInstance = { ...api };\n            // remove the first argument\n            const [augmentApiInstance] = args.splice(0, 1);\n            // let the caller augment the instance\n            augmentApiInstance(apiInstance);\n        }\n        return fn.call(null, apiInstance, ...args);\n    };\n    return wrappedCall;\n}\n\nexport { defaults, mande, nuxtWrap };\n"],
  "mappings": "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",
  "names": []
}
